#!/usr/bin/python3

# Serveur météo pour Weather watcher et Domoticz
# Version:  0.1
# Date:     17/02/2020
# Auteur:   Serge CLAUS
# Licence:  GPL V3

# Démon de gestion météo:
# -----------------------
# Acquisition des données de l'Arduino (port série)
# Acquisition des données de Domoticz (MQTT)
# Transmission des données à Domoticz (MQTT)
# Serveur web pour Weather watcher
# Fermeture de l'abri en cas de pluie (Indi client "Park")

#SerialPort="/dev/StationMeteo"
SerialPort="/dev/ttyUSB0"
#DDevices={3468:[['svalue1',0,'Text'],['svalue2',70,"Hext"]],3465:[['svalue1',0,'Pluie']],3466:[['svalue3',0,'Vent']]}
DDevices={3465:[['svalue1',0,'Pluie']],3466:[['svalue3',0,'Vent']]} # Vent (nouveau) 3540
#ADevices={"Tciel":0,"CouvN":0,"Text":0,"Hext":0,"Pres":0,"SQM":0}
ADevices={"Text":0,"Hext":0,"Pres":0,"Tciel":0,"CouvN":0} #,"SQM":0,"Cpluie":0}


Vmax=0

import paho.mqtt.client as mqtt
import json
import time
import threading
import serial
from pathlib import Path
from http.server import HTTPServer, BaseHTTPRequestHandler


def on_connect(client, userdata, flags, rc):
    print("Connected with result code "+str(rc))
    client.subscribe("domoticz/out")

def on_message(client, userdata, msg):
	rep=msg.payload
	domoticzjson=json.loads(rep)
	#for i, v in enumerate(domoticzjson["result"]):
	Index=domoticzjson['idx']
	if Index in DDevices.keys():
		for i in DDevices[Index]:
			Valeur=domoticzjson[i[0]]
			if i[2] != "Vent":
				i[1]=Valeur
			elif  (int(Valeur) != 165): # Bug de la station météo
				#print('**********************************')
				i[1]=float(Valeur)*0.36

def ArduinoData():
	# Lecture des données série 
	# Attente de la présence du port série
	time.sleep(10)
	portOk = Path(SerialPort)
	while not portOk.exists():
		print("*",)
		time.sleep(10)
	Ser = serial.Serial(SerialPort, 9600)
	while True:
		try:
			msg = Ser.readline().decode().rstrip("\n")
			#print(msg)
			[nom,valeur]=msg.split("=")
			if nom in ADevices.keys():
				ADevices[nom]=valeur
		except:
			while not portOk.exists():
				print("*",)
				time.sleep(10)
			Ser = serial.Serial(SerialPort, 9600)
			
def SendDomoticz():
	time.sleep(60) # Attend la disponibilité des données
	while 1:
		# Envoi les données à Domoticz toutes les minutes
		msg="{\"command\": \"udevice\", \"idx\": 3529, \"svalue\": \""+str(float(ADevices["Text"]))+";"+str(float(ADevices["Hext"]))+";0;"+str(float(ADevices["Pres"]))+";0\"}"
		#print(msg)
		client.publish("domoticz/in",msg)
		msg="{\"command\": \"udevice\", \"idx\": 484, \"svalue\":\""+str(float(ADevices["Tciel"]))+"\"}"
		client.publish("domoticz/in",msg)
		msg="{\"command\": \"udevice\", \"idx\": 3539, \"svalue\":\""+str(float(ADevices["CouvN"]))+"\"}"
		client.publish("domoticz/in",msg)
		time.sleep(60)
		
	
class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):
	def do_HEAD(self):
		self.send_response(200)
		self.send_header("Content-type", "text/plain")
		self.end_headers()
	def do_GET(self):
		self.send_response(200)
		# Informations en provenance de Domoticz
		for i in DDevices.keys():
			for j in DDevices[i]:
				msg=j[2]+"="+str(j[1])+"\n"
				self.wfile.write(bytes(msg, encoding='utf8'))
		# Informations en provenance d'Arduino
		for i in ADevices.keys():
			msg=i+"="+str(ADevices[i])+"\n"
			self.wfile.write(bytes(msg, encoding='utf8'))
		#self.wfile.write(b"Gust=0\n")
		#self.wfile.write(b"Nuages=0\n")

print("Demarrage")

# Port série
thread = threading.Thread(target=ArduinoData)
thread.start()

# Envoi des données à Domoticz
thread2 = threading.Thread(target=SendDomoticz)
thread2.start()

# Client MQTT        
client=mqtt.Client();
client.on_connect=on_connect
client.on_message=on_message
client.connect("domopi.local", 1883, 60)
client.loop_start()

# Serveur http
httpd = HTTPServer(('', 1789), SimpleHTTPRequestHandler)
httpd.serve_forever()
